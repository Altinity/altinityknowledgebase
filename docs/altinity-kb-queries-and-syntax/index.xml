<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queries &amp; Syntax on Altinity Beta Knowledgebase</title>
    <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/</link>
    <description>Recent content in Queries &amp; Syntax on Altinity Beta Knowledgebase</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/mutations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/mutations/</guid>
      <description>title: &amp;ldquo;Mutations&amp;rdquo; linkTitle: &amp;ldquo;Mutations&amp;rdquo; description: &amp;gt; Mutations Q. How to know if ALTER TABLE … DELETE/UPDATE mutation ON CLUSTER was finished successfully on all the nodes?
A. mutation status in system.mutations is local to each replica, so use
SELECT hostname(), * FROM clusterAllReplicas(&amp;#39;your_cluster_name&amp;#39;, system.mutations); -- you can also add WHERE conditions to that query if needed. Look on is_done and latest_fail_reason columns</description>
    </item>
    
    <item>
      <title></title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/pivot-unpivot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/pivot-unpivot/</guid>
      <description>title: &amp;ldquo;PIVOT / UNPIVOT&amp;rdquo; linkTitle: &amp;ldquo;PIVOT / UNPIVOT&amp;rdquo; description: &amp;gt; PIVOT / UNPIVOT PIVOT CREATEORREPLACETABLEmonthly_sales(empidINT,amountINT,monthTEXT)ENGINE=Memory();INSERTINTOmonthly_salesVALUES(1,10000,&amp;#39;JAN&amp;#39;),(1,400,&amp;#39;JAN&amp;#39;),(2,4500,&amp;#39;JAN&amp;#39;),(2,35000,&amp;#39;JAN&amp;#39;),(1,5000,&amp;#39;FEB&amp;#39;),(1,3000,&amp;#39;FEB&amp;#39;),(2,200,&amp;#39;FEB&amp;#39;),(2,90500,&amp;#39;FEB&amp;#39;),(1,6000,&amp;#39;MAR&amp;#39;),(1,5000,&amp;#39;MAR&amp;#39;),(2,2500,&amp;#39;MAR&amp;#39;),(2,9500,&amp;#39;MAR&amp;#39;),(1,8000,&amp;#39;APR&amp;#39;),(1,10000,&amp;#39;APR&amp;#39;),(2,800,&amp;#39;APR&amp;#39;),(2,4500,&amp;#39;APR&amp;#39;);SETallow_experimental_map_type=1;WITHCAST(sumMap([month],[amount]),&amp;#39;Map(String, UInt32)&amp;#39;)ASmapSELECTempid,map[&amp;#39;JAN&amp;#39;]ASJAN,map[&amp;#39;FEB&amp;#39;]ASFEB,map[&amp;#39;MAR&amp;#39;]ASMAR,map[&amp;#39;APR&amp;#39;]ASAPRFROMmonthly_salesGROUPBYempidORDERBYempidASC┌─empid─┬───JAN─┬───FEB─┬───MAR─┬───APR─┐│1│10400│8000│11000│18000││2│39500│90700│12000│5300│└───────┴───────┴───────┴───────┴───────┘SELECTempid,sumIf(amount,month=&amp;#39;JAN&amp;#39;)ASJAN,sumIf(amount,month=&amp;#39;FEB&amp;#39;)ASFEB,sumIf(amount,month=&amp;#39;MAR&amp;#39;)ASMAR,sumIf(amount,month=&amp;#39;APR&amp;#39;)ASAPRFROMmonthly_salesGROUPBYempidORDERBYempidASC┌─empid─┬───JAN─┬───FEB─┬───MAR─┬───APR─┐│1│10400│8000│11000│18000││2│39500│90700│12000│5300│└───────┴───────┴───────┴───────┴───────┘UNPIVOT CREATEORREPLACETABLEmonthly_sales(empidINT,deptTEXT,janINT,febINT,marINT,aprilINT)ENGINE=Memory();INSERTINTOmonthly_salesVALUES(1,&amp;#39;electronics&amp;#39;,100,200,300,100),(2,&amp;#39;clothes&amp;#39;,100,300,150,200),(3,&amp;#39;cars&amp;#39;,200,400,100,50);SELECTempid,dept,month,salesFROMmonthly_salesARRAYJOIN[jan,feb,mar,april]ASsales,splitByString(&amp;#39;, &amp;#39;,&amp;#39;jan, feb, mar, april&amp;#39;)ASmonthORDERBYempidASC┌─empid─┬─dept────────┬─month─┬─sales─┐│1│electronics│jan│100││1│electronics│feb│200││1│electronics│mar│300││1│electronics│april│100││2│clothes│jan│100││2│clothes│feb│300││2│clothes│mar│150││2│clothes│april│200││3│cars│jan│200││3│cars│feb│400││3│cars│mar│100││3│cars│april│50│└───────┴─────────────┴───────┴───────┘© 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/sampling-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/sampling-example/</guid>
      <description>title: &amp;ldquo;Sampling Example&amp;rdquo; linkTitle: &amp;ldquo;Sampling Example&amp;rdquo; description: &amp;gt; Sampling Example The most important idea about sampling that the primary index must have low cardinality. The following example demonstrates how sampling can be setup correctly, and an example if it being set up incorrectly as a comparison.
Sampling requires sample by expression . This ensures a range of sampled column types fit within a specified range, which ensures the requirement of low cardinality.</description>
    </item>
    
    <item>
      <title>-State &amp; -Merge combinators</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/state-and-merge-combinators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/state-and-merge-combinators/</guid>
      <description>-State combinator doesn&amp;rsquo;t actually store information about -If combinator, so aggregate functions with -If and without have the same serialized data.
$clickhouse-local--query &amp;#34;SELECT maxIfState(number,number % 2) as x, maxState(number) as y FROM numbers(10) FORMAT RowBinary&amp;#34; | clickhouse-local --input-format RowBinary --structure=&amp;#34;x AggregateFunction(max,UInt64), y AggregateFunction(max,UInt64)&amp;#34; --query &amp;#34;SELECT maxMerge(x), maxMerge(y) FROM table&amp;#34; 99$clickhouse-local--query &amp;#34;SELECT maxIfState(number,number % 2) as x, maxState(number) as y FROM numbers(11) FORMAT RowBinary&amp;#34; | clickhouse-local --input-format RowBinary --structure=&amp;#34;x AggregateFunction(max,UInt64), y AggregateFunction(max,UInt64)&amp;#34; --query &amp;#34;SELECT maxMerge(x), maxMerge(y) FROM table&amp;#34; 910-State combinator have the same serialized data footprint regardless of parameters used in definition of aggregate function.</description>
    </item>
    
    <item>
      <title>ALTER MODIFY COLUMN is stuck, the column is inaccessible.</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-alter-modify-column-is-stuck-the-column-is-inaccessible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-alter-modify-column-is-stuck-the-column-is-inaccessible/</guid>
      <description>Problem You have table:
CREATETABLEmodify_column(column_nString)ENGINE=MergeTree()ORDERBYtuple();Populate it with data:
INSERTINTOmodify_columnVALUES(&amp;#39;key_a&amp;#39;);INSERTINTOmodify_columnVALUES(&amp;#39;key_b&amp;#39;);INSERTINTOmodify_columnVALUES(&amp;#39;key_c&amp;#39;);Tried to apply alter table query with changing column type:
ALTERTABLEmodify_columnMODIFYCOLUMNcolumn_nEnum8(&amp;#39;key_a&amp;#39;=1,&amp;#39;key_b&amp;#39;=2);But it didn’t succeed and you see an error in system.mutations table:
SELECT*FROMsystem.mutationsWHERE(table=&amp;#39;modify_column&amp;#39;)AND(is_done=0)FORMATVerticalRow1:──────database:defaulttable:modify_columnmutation_id:mutation_4.txtcommand:MODIFYCOLUMN`column_n`Enum8(&amp;#39;key_a&amp;#39;=1,&amp;#39;key_b&amp;#39;=2)create_time:2021-03-0318:38:09block_numbers.partition_id:[&amp;#39;&amp;#39;]block_numbers.number:[4]parts_to_do_names:[&amp;#39;all_3_3_0&amp;#39;]parts_to_do:1is_done:0latest_failed_part:all_3_3_0latest_fail_time:2021-03-0318:38:59latest_fail_reason:Code:36,e.displayText()=DB::Exception:Unknownelement&amp;#39;key_c&amp;#39;fortypeEnum8(&amp;#39;key_a&amp;#39;=1,&amp;#39;key_b&amp;#39;=2):whileexecuting&amp;#39;FUNCTION CAST(column_n :: 0, &amp;#39;Enum8(\&amp;#39;key_a\&amp;#39;=1,\&amp;#39;key_b\&amp;#39;=2)&amp;#39; :: 1) -&amp;gt; cast(column_n, &amp;#39;Enum8(\&amp;#39;key_a\&amp;#39;=1,\&amp;#39;key_b\&amp;#39;=2)&amp;#39;) Enum8(&amp;#39;key_a&amp;#39; = 1, &amp;#39;key_b&amp;#39; = 2) : 2&amp;#39;:(whilereadingfrompart/var/lib/clickhouse/data/default/modify_column/all_3_3_0/):WhileexecutingMergeTree(version21.3.1.6041)And you can’t query that column anymore:
SELECTcolumn_nFROMmodify_column┌─column_n─┐│key_a│└──────────┘┌─column_n─┐│key_b│└──────────┘↓Progress:2.00rows,2.00B(19.48rows/s.,19.48B/s.)2rowsinset.Elapsed:0.104sec.Receivedexceptionfromserver(version21.3.1):Code:36.DB::Exception:Receivedfromlocalhost:9000.DB::Exception:Unknownelement&amp;#39;key_c&amp;#39;fortypeEnum8(&amp;#39;key_a&amp;#39;=1,&amp;#39;key_b&amp;#39;=2):whileexecuting&amp;#39;FUNCTION CAST(column_n :: 0, &amp;#39;Enum8(\&amp;#39;key_a\&amp;#39;=1,\&amp;#39;key_b\&amp;#39;=2)&amp;#39; :: 1) -&amp;gt; cast(column_n, &amp;#39;Enum8(\&amp;#39;key_a\&amp;#39;=1,\&amp;#39;key_b\&amp;#39;=2)&amp;#39;) Enum8(&amp;#39;key_a&amp;#39; = 1, &amp;#39;key_b&amp;#39; = 2) : 2&amp;#39;:(whilereadingfrompart/var/lib/clickhouse/data/default/modify_column/all_3_3_0/):WhileexecutingMergeTreeThread.</description>
    </item>
    
    <item>
      <title>ANSI SQL mode</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/ansi-sql-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/ansi-sql-mode/</guid>
      <description>It&amp;rsquo;s possible to tune some settings which would make ClickHouse more ANSI SQL compatible(and slower):
SETjoin_use_nulls=1;-- introduced long ago SETcast_keep_nullable=1;-- introduced in 20.5 SETunion_default_mode=&amp;#39;DISTINCT&amp;#39;;-- introduced in 21.1 SETallow_experimental_window_functions=1;-- introduced in 21.3 SETprefer_column_name_to_alias=1;-- introduced in 21.4; © 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title>Atomic insert</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/atomic-insert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/atomic-insert/</guid>
      <description>Insert would be atomic only if those conditions met:
 Insert data only in single partition. Numbers of rows is less than max_insert_block_size. Table doesn&amp;rsquo;t have Materialized Views (there is no atomicity Table &amp;lt;&amp;gt; MV) For TSV, TKSV, CSV, and JSONEachRow formats, setting input_format_parallel_parsing=0 is set.  {% embed url=&amp;ldquo;https://github.com/ClickHouse/ClickHouse/issues/9195#issuecomment-587500824&amp;rdquo; %}
© 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title>Cumulative Anything</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/cumulative-unique/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/cumulative-unique/</guid>
      <description>Sample data CREATETABLEevents(`ts`DateTime,`user_id`UInt32)ENGINE=Memory;INSERTINTOeventsSELECTtoDateTime(&amp;#39;2021-04-29 10:10:10&amp;#39;)+toIntervalHour(7*number)ASts,toDayOfWeek(ts)+(number%2)ASuser_idFROMnumbers(15);Using arrays WITHgroupArray(_ts)ASts_arr,groupArray(state)ASstate_arrSELECTarrayJoin(ts_arr)ASts,arrayReduce(&amp;#39;uniqExactMerge&amp;#39;,arrayFilter((x,y)-&amp;gt;(y&amp;lt;=ts),state_arr,ts_arr))ASuniqFROM(SELECTtoStartOfDay(ts)AS_ts,uniqExactState(user_id)ASstateFROMeventsGROUPBY_ts)ORDERBYtsASC┌──────────────────ts─┬─uniq─┐│2021-04-2900:00:00│2││2021-04-3000:00:00│3││2021-05-0100:00:00│4││2021-05-0200:00:00│5││2021-05-0300:00:00│7│└─────────────────────┴──────┘WITHarrayJoin(range(toUInt32(_ts)ASint,least(int+toUInt32((3600*24)*5),toUInt32(toDateTime(&amp;#39;2021-05-04 00:00:00&amp;#39;))),3600*24))ASts_expandedSELECTtoDateTime(ts_expanded)ASts,uniqExactMerge(state)ASuniqFROM(SELECTtoStartOfDay(ts)AS_ts,uniqExactState(user_id)ASstateFROMeventsGROUPBY_ts)GROUPBYtsORDERBYtsASC┌──────────────────ts─┬─uniq─┐│2021-04-2900:00:00│2││2021-04-3000:00:00│3││2021-05-0100:00:00│4││2021-05-0200:00:00│5││2021-05-0300:00:00│7│└─────────────────────┴──────┘Using window functions (starting from Clickhouse 21.3) SELECTts,uniqExactMerge(state)OVER(ORDERBYtsASCROWSBETWEENUNBOUNDEDPRECEDINGANDCURRENTROW)ASuniqFROM(SELECTtoStartOfDay(ts)ASts,uniqExactState(user_id)ASstateFROMeventsGROUPBYts)ORDERBYtsASC┌──────────────────ts─┬─uniq─┐│2021-04-2900:00:00│2││2021-04-3000:00:00│3││2021-05-0100:00:00│4││2021-05-0200:00:00│5││2021-05-0300:00:00│7│└─────────────────────┴──────┘Using runningAccumulate (incorrect result over blocks) SELECTts,runningAccumulate(state)ASuniqFROM(SELECTtoStartOfDay(ts)ASts,uniqExactState(user_id)ASstateFROMeventsGROUPBYtsORDERBYtsASC)ORDERBYtsASC┌──────────────────ts─┬─uniq─┐│2021-04-2900:00:00│2││2021-04-3000:00:00│3││2021-05-0100:00:00│4││2021-05-0200:00:00│5││2021-05-0300:00:00│7│└─────────────────────┴──────┘</description>
    </item>
    
    <item>
      <title>Data types on disk and in RAM</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/data-types-on-disk-and-in-ram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/data-types-on-disk-and-in-ram/</guid>
      <description>DataType RAM size (=byteSize) Disk Size     String string byte length + 9 string length: 64 bit integer
zero-byte terminator: 1 byte.
 string length prefix (varint) + string itself:
 string shorter than 128 - string byte length + 1 string shorter than 16384 - string byte length + 2 string shorter than 2097152 - string byte length + 2 string shorter than 268435456 - string byte length + 4</description>
    </item>
    
    <item>
      <title>DELETE via tombstone column</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/delete-via-tombstone-column/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/delete-via-tombstone-column/</guid>
      <description>CREATETABLEtest_delete(`key`UInt32,`ts`UInt32,`value_a`String,`value_b`String,`value_c`String,`is_active`UInt8DEFAULT1)ENGINE=MergeTreeORDERBYkey;INSERTINTOtest_delete(key,ts,value_a,value_b,value_c)SELECTnumber,1,concat(&amp;#39;some_looong_string&amp;#39;,toString(number)),concat(&amp;#39;another_long_str&amp;#39;,toString(number)),concat(&amp;#39;string&amp;#39;,toString(number))FROMnumbers(10000000);INSERTINTOtest_delete(key,ts,value_a,value_b,value_c)VALUES(400000,2,&amp;#39;totally different string&amp;#39;,&amp;#39;another totally different string&amp;#39;,&amp;#39;last string&amp;#39;);SELECT*FROMtest_deleteWHEREkey=400000;┌────key─┬─ts─┬─value_a──────────────────┬─value_b──────────────────────────┬─value_c─────┬─is_active─┐│400000│2│totallydifferentstring│anothertotallydifferentstring│laststring│1│└────────┴────┴──────────────────────────┴──────────────────────────────────┴─────────────┴───────────┘┌────key─┬─ts─┬─value_a──────────────────┬─value_b────────────────┬─value_c──────┬─is_active─┐│400000│1│some_looong_string400000│another_long_str400000│string400000│1│└────────┴────┴──────────────────────────┴────────────────────────┴──────────────┴───────────┘SETmutations_sync=2;ALTERTABLEtest_deleteUPDATEis_active=0WHERE(key=400000)AND(ts=1);Ok.0rowsinset.Elapsed:0.058sec.SELECT*FROMtest_deleteWHERE(key=400000)ANDis_active;┌────key─┬─ts─┬─value_a──────────────────┬─value_b──────────────────────────┬─value_c─────┬─is_active─┐│400000│2│totallydifferentstring│anothertotallydifferentstring│laststring│1│└────────┴────┴──────────────────────────┴──────────────────────────────────┴─────────────┴───────────┘ALTERTABLEtest_deleteDELETEWHERE(key=400000)AND(ts=1);Ok.0rowsinset.Elapsed:1.101sec.-- 20 times slower!!! SELECT*FROMtest_deleteWHEREkey=400000;┌────key─┬─ts─┬─value_a──────────────────┬─value_b──────────────────────────┬─value_c─────┬─is_active─┐│400000│2│totallydifferentstring│anothertotallydifferentstring│laststring│1│└────────┴────┴──────────────────────────┴──────────────────────────────────┴─────────────┴───────────┘-- For ReplacingMergeTree OPTIMIZETABLEtest_deleteFINAL;Ok.0rowsinset.Elapsed:2.230sec.-- 40 times slower!!! SELECT*FROMtest_deleteWHEREkey=400000┌────key─┬─ts─┬─value_a──────────────────┬─value_b──────────────────────────┬─value_c─────┬─is_active─┐│400000│2│totallydifferentstring│anothertotallydifferentstring│laststring│1│└────────┴────┴──────────────────────────┴──────────────────────────────────┴─────────────┴───────────┘</description>
    </item>
    
    <item>
      <title>EXPLAIN query</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/explain-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/explain-query/</guid>
      <description>https://github.com/ClickHouse/clickhouse-presentations/blob/master/meetup47/explain.pdf
https://github.com/ClickHouse/clickhouse-presentations/blob/master/meetup39/query-profiling.pdf</description>
    </item>
    
    <item>
      <title>Fill missing values at query time</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/fill-missing-values-at-query-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/fill-missing-values-at-query-time/</guid>
      <description>CREATETABLEevent_table(`key`UInt32,`created_at`DateTime,`value_a`UInt32,`value_b`String)ENGINE=MergeTreeORDERBY(key,created_at)INSERTINTOevent_tableSELECT1ASkey,toDateTime(&amp;#39;2020-10-11 10:10:10&amp;#39;)+numberAScreated_at,if((number=0)OR((number%5)=1),number+1,0)ASvalue_a,if((number=0)OR((number%3)=1),toString(number),&amp;#39;&amp;#39;)ASvalue_bFROMnumbers(10)SELECTmain.</description>
    </item>
    
    <item>
      <title>FINAL clause speed</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-final-clause-speed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-final-clause-speed/</guid>
      <description>SELECT * FROM table FINAL
 Before 20.5 - always executed in a single thread and slow. Since 20.5 - final can be parallel, see https://github.com/ClickHouse/ClickHouse/pull/10463 Since 20.10 - you can use do_not_merge_across_partitions_select_final setting.  See https://github.com/ClickHouse/ClickHouse/pull/15938 and https://github.com/ClickHouse/ClickHouse/issues/11722
So it can work in the following way:
 Daily partitioning After day end + some time interval during which you can get some updates - for example at 3am / 6am you do OPTIMIZE TABLE xxx PARTITION &#39;prev_day&#39; FINAL In that case using that FINAL with do_not_merge_across_partitions_select_final will be cheap.</description>
    </item>
    
    <item>
      <title>Join with Calendar using Arrays</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/join-with-calendar-using-arrays/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/join-with-calendar-using-arrays/</guid>
      <description>Sample data CREATETABLEtest_metrics(counter_idInt64,timestampDateTime,metricUInt64)Engine=Log;INSERTINTOtest_metricsSELECTnumber%3,toDateTime(&amp;#39;2021-01-01 00:00:00&amp;#39;),1FROMnumbers(20);INSERTINTOtest_metricsSELECTnumber%3,toDateTime(&amp;#39;2021-01-03 00:00:00&amp;#39;),1FROMnumbers(20);SELECTcounter_id,toDate(timestamp)dt,sum(metric)FROMtest_metricsGROUPBYcounter_id,dtORDERBYcounter_id,dt;┌─counter_id─┬─────────dt─┬─sum(metric)─┐│0│2021-01-01│7││0│2021-01-03│7││1│2021-01-01│7││1│2021-01-03│7││2│2021-01-01│6││2│2021-01-03│6│└────────────┴────────────┴─────────────┘Calendar WITHarrayMap(i-&amp;gt;(toDate(&amp;#39;2021-01-01&amp;#39;)+i),range(4))ASCalendarSELECTarrayJoin(Calendar);┌─arrayJoin(Calendar)─┐│2021-01-01││2021-01-02││2021-01-03││2021-01-04│└─────────────────────┘Join with Calendar using arrayJoin SELECTcounter_id,tuple.2dt,sum(tuple.1)sumFROM(WITHarrayMap(i-&amp;gt;(0,toDate(&amp;#39;2021-01-01&amp;#39;)+i),range(4))ASCalendarSELECTcounter_id,arrayJoin(arrayConcat(Calendar,[(sum,dt)]))tupleFROM(SELECTcounter_id,toDate(timestamp)dt,sum(metric)sumFROMtest_metricsGROUPBYcounter_id,dt))GROUPBYcounter_id,dtORDERBYcounter_id,dt;┌─counter_id─┬─────────dt─┬─sum─┐│0│2021-01-01│7││0│2021-01-02│0││0│2021-01-03│7││0│2021-01-04│0││1│2021-01-01│7││1│2021-01-02│0││1│2021-01-03│7││1│2021-01-04│0││2│2021-01-01│6││2│2021-01-02│0││2│2021-01-03│6││2│2021-01-04│0│└────────────┴────────────┴─────┘With fill SELECTcounter_id,toDate(timestamp)ASdt,sum(metric)ASsumFROMtest_metricsGROUPBYcounter_id,dtORDERBYcounter_idASCWITHFILL,dtASCWITHFILLFROMtoDate(&amp;#39;2021-01-01&amp;#39;)TOtoDate(&amp;#39;2021-01-05&amp;#39;);┌─counter_id─┬─────────dt─┬─sum─┐│0│2021-01-01│7││0│2021-01-02│0││0│2021-01-03│7││0│2021-01-04│0││1│2021-01-01│7││1│2021-01-02│0││1│2021-01-03│7││1│2021-01-04│0││2│2021-01-01│6││2│2021-01-02│0││2│2021-01-03│6││2│2021-01-04│0│└────────────┴────────────┴─────┘© 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title>JOINs</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/joins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/joins/</guid>
      <description>See presentation:
{% embed url=&amp;ldquo;https://github.com/ClickHouse/clickhouse-presentations/blob/master/meetup38/join.pdf&amp;quot; %}</description>
    </item>
    
    <item>
      <title>JSONExtract to parse many attributes at a time</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/jsonextract-to-parse-many-attributes-at-a-time/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/jsonextract-to-parse-many-attributes-at-a-time/</guid>
      <description>WITHJSONExtract(json,&amp;#39;Tuple(name String, id String, resources Nested(description String, format String, tracking_summary Tuple(total UInt32, recent UInt32)), extras Nested(key String, value String))&amp;#39;)ASparsed_jsonSELECTtupleElement(parsed_json,&amp;#39;name&amp;#39;)ASname,tupleElement(parsed_json,&amp;#39;id&amp;#39;)ASid,tupleElement(tupleElement(parsed_json,&amp;#39;resources&amp;#39;),&amp;#39;description&amp;#39;)AS`resources.description`,tupleElement(tupleElement(parsed_json,&amp;#39;resources&amp;#39;),&amp;#39;format&amp;#39;)AS`resources.format`,tupleElement(tupleElement(tupleElement(parsed_json,&amp;#39;resources&amp;#39;),&amp;#39;tracking_summary&amp;#39;),&amp;#39;total&amp;#39;)AS`resources.tracking_summary.total`,tupleElement(tupleElement(tupleElement(parsed_json,&amp;#39;resources&amp;#39;),&amp;#39;tracking_summary&amp;#39;),&amp;#39;recent&amp;#39;)AS`resources.tracking_summary.recent`FROMurl(&amp;#39;https://raw.githubusercontent.com/jsonlines/guide/master/datagov100.json&amp;#39;,&amp;#39;JSONAsString&amp;#39;,&amp;#39;json String&amp;#39;)</description>
    </item>
    
    <item>
      <title>KILL QUERY</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-kill-query/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-kill-query/</guid>
      <description>Unfortunately not all queries can be killed.
KILL QUERY only sets a flag that must be checked by the query.
A query pipeline is checking this flag before a switching to next block. If the pipeline has stuck somewhere in the middle it cannot be killed.
If a query does not stop, the only way to get rid of it is to restart ClickHouse.
See also
https://github.com/ClickHouse/ClickHouse/issues/3964
https://github.com/ClickHouse/ClickHouse/issues/1576
How to replace a running query   Q.</description>
    </item>
    
    <item>
      <title>Lag / Lead</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/lag-lead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/lag-lead/</guid>
      <description>Sample data CREATETABLEllexample(gInt32,aDate)ENGINE=Memory;INSERTINTOllexampleSELECTnumber%3,toDate(&amp;#39;2020-01-01&amp;#39;)+numberFROMnumbers(10);SELECT*FROMllexampleORDERBYg,a;┌─g─┬──────────a─┐│0│2020-01-01││0│2020-01-04││0│2020-01-07││0│2020-01-10││1│2020-01-02││1│2020-01-05││1│2020-01-08││2│2020-01-03││2│2020-01-06││2│2020-01-09│└───┴────────────┘Using arrays selectg,(arrayJoin(tuple_ll)asll).1a,ll.2prev,ll.3nextfrom(selectg,arrayMap(i,j,k-&amp;gt;(i,j,k),arraySort(groupArray(a))asaa,arrayPopBack(arrayPushFront(aa,toDate(0))),arrayPopFront(arrayPushBack(aa,toDate(0))))tuple_llfromllexamplegroupbyg)orderbyg,a;┌─g─┬──────────a─┬───────prev─┬───────next─┐│0│2020-01-01│1970-01-01│2020-01-04││0│2020-01-04│2020-01-01│2020-01-07││0│2020-01-07│2020-01-04│2020-01-10││0│2020-01-10│2020-01-07│1970-01-01││1│2020-01-02│1970-01-01│2020-01-05││1│2020-01-05│2020-01-02│2020-01-08││1│2020-01-08│2020-01-05│1970-01-01││2│2020-01-03│1970-01-01│2020-01-06││2│2020-01-06│2020-01-03│2020-01-09││2│2020-01-09│2020-01-06│1970-01-01│└───┴────────────┴────────────┴────────────┘Using window functions (starting from Clickhouse 21.3) SETallow_experimental_window_functions=1;SELECTg,a,any(a)OVER(PARTITIONBYgORDERBYaASCROWSBETWEEN1PRECEDINGAND1PRECEDING)ASprev,any(a)OVER(PARTITIONBYgORDERBYaASCROWSBETWEEN1FOLLOWINGAND1FOLLOWING)ASnextFROMllexampleORDERBYgASC,aASC;┌─g─┬──────────a─┬───────prev─┬───────next─┐│0│2020-01-01│1970-01-01│2020-01-04││0│2020-01-04│2020-01-01│2020-01-07││0│2020-01-07│2020-01-04│2020-01-10││0│2020-01-10│2020-01-07│1970-01-01││1│2020-01-02│1970-01-01│2020-01-05││1│2020-01-05│2020-01-02│2020-01-08││1│2020-01-08│2020-01-05│1970-01-01││2│2020-01-03│1970-01-01│2020-01-06││2│2020-01-06│2020-01-03│2020-01-09││2│2020-01-09│2020-01-06│1970-01-01│└───┴────────────┴────────────┴────────────┘Using lagInFrame/leadInFrame (starting from ClickHouse 21.4) SELECTg,a,lagInFrame(a)OVER(PARTITIONBYgORDERBYaASCROWSBETWEENUNBOUNDEDPRECEDINGANDUNBOUNDEDFOLLOWING)ASprev,leadInFrame(a)OVER(PARTITIONBYgORDERBYaASCROWSBETWEENUNBOUNDEDPRECEDINGANDUNBOUNDEDFOLLOWING)ASnextFROMllexampleORDERBYgASC,aASC;┌─g─┬──────────a─┬───────prev─┬───────next─┐│0│2020-01-01│1970-01-01│2020-01-04││0│2020-01-04│2020-01-01│2020-01-07││0│2020-01-07│2020-01-04│2020-01-10││0│2020-01-10│2020-01-07│1970-01-01││1│2020-01-02│1970-01-01│2020-01-05││1│2020-01-05│2020-01-02│2020-01-08││1│2020-01-08│2020-01-05│1970-01-01││2│2020-01-03│1970-01-01│2020-01-06││2│2020-01-06│2020-01-03│2020-01-09││2│2020-01-09│2020-01-06│1970-01-01│└───┴────────────┴────────────┴────────────┘Using neighbor (no grouping, incorrect result over blocks) SELECTg,a,neighbor(a,-1)ASprev,neighbor(a,1)ASnextFROM(SELECT*FROMllexampleORDERBYgASC,aASC);┌─g─┬──────────a─┬───────prev─┬───────next─┐│0│2020-01-01│1970-01-01│2020-01-04││0│2020-01-04│2020-01-01│2020-01-07││0│2020-01-07│2020-01-04│2020-01-10││0│2020-01-10│2020-01-07│2020-01-02││1│2020-01-02│2020-01-10│2020-01-05││1│2020-01-05│2020-01-02│2020-01-08││1│2020-01-08│2020-01-05│2020-01-03││2│2020-01-03│2020-01-08│2020-01-06││2│2020-01-06│2020-01-03│2020-01-09││2│2020-01-09│2020-01-06│1970-01-01│└───┴────────────┴────────────┴────────────┘© 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title>Machine learning in ClickHouse</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/machine-learning-in-clickhouse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/machine-learning-in-clickhouse/</guid>
      <description>{% embed url=&amp;ldquo;https://github.com/ClickHouse/clickhouse-presentations/blob/master/meetup31/ml.pdf&amp;quot; %}
{% page-ref page=&amp;rdquo;../altinity-kb-integrations/catboost-mindsdb-fast.ai.md&amp;quot; %}
{% embed url=&amp;ldquo;https://github.com/ClickHouse/clickhouse-presentations/blob/master/meetup38/forecast.pdf&amp;quot; %}</description>
    </item>
    
    <item>
      <title>OPTIMIZE vs OPTIMIZE FINAL</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-optimize-vs-optimize-final/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-optimize-vs-optimize-final/</guid>
      <description>OPTIMIZE TABLE xyz &amp;ndash; this initiates an unscheduled merge.
Example You have 40 parts in 3 partitions. This unscheduled merge selects some partition (i.e. February) and selects 3 small parts to merge, then merge them into a single part. You get 38 parts in the result.
OPTIMIZE TABLE xyz FINAL &amp;ndash; initiates a cycle of unscheduled merges.
ClickHouse merges parts in this table until will remains 1 part in each partition (if a system has enough free disk space).</description>
    </item>
    
    <item>
      <title>Parameterized views</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-parameterized-views/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-parameterized-views/</guid>
      <description>Custom settings allows to emulate parameterized views.
You need to enable custom settings and define any prefixes for settings.
$ cat /etc/clickhouse-server/config.d/custom_settigs_prefix.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt; &amp;lt;yandex&amp;gt; &amp;lt;custom_settings_prefixes&amp;gt;my,my2&amp;lt;/custom_settings_prefixes&amp;gt; &amp;lt;/yandex&amp;gt; $ service clickhouse-server restart Now you can set settings as any other settings, and query them using getSetting() function.
SETmy2_category=&amp;#39;hot deals&amp;#39;;SELECTgetSetting(&amp;#39;my2_category&amp;#39;);┌─getSetting(&amp;#39;my2_category&amp;#39;)─┐│hotdeals│└────────────────────────────┘-- you can query ClickHouse settings as well SELECTgetSetting(&amp;#39;max_threads&amp;#39;)┌─getSetting(&amp;#39;max_threads&amp;#39;)─┐│8│└───────────────────────────┘Now we can create a view
CREATEVIEWmy_new_viewASSELECT*FROMdealsWHEREcategory_idIN(SELECTcategory_idFROMdeal_categoriesWHEREcategory=getSetting(&amp;#39;my2_category&amp;#39;));And query it
SELECT*FROMmy_new_viewSETTINGSmy2_category=&amp;#39;hot deals&amp;#39;;© 2021 Altinity Inc. All rights reserved.</description>
    </item>
    
    <item>
      <title>Possible deadlock avoided. Client should retry</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-possible-deadlock-avoided.-client-should-retry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-possible-deadlock-avoided.-client-should-retry/</guid>
      <description>In version 19.14 a serious issue was found: a race condition that can lead to server deadlock. The reason for that was quite fundamental, and a temporary workaround for that was added (&amp;ldquo;possible deadlock avoided&amp;rdquo;).
Those locks are one of the fundamental things that the core team was actively working on in 2020.
In 20.3 some of the locks leading to that situation were removed as a part of huge refactoring.</description>
    </item>
    
    <item>
      <title>Projections examples</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/projections-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/projections-examples/</guid>
      <description>Aggregating projections. createtablez(BrowserString,CountryUInt8,FFloat64)Engine=MergeTreeorderbyBrowser;insertintozselecttoString(number%9999),number%33,1fromnumbers(100000000);--Q1) selectsum(F),BrowserfromzgroupbyBrowserformatNull;Elapsed:0.205sec.Processed100.00millionrows--Q2) selectsum(F),Browser,CountryfromzgroupbyBrowser,CountryformatNull;Elapsed:0.381sec.Processed100.00millionrows--Q3) selectsum(F),count(),Browser,CountryfromzgroupbyBrowser,CountryformatNull;Elapsed:0.398sec.Processed100.00millionrowsaltertablezaddprojectionpp(selectBrowser,Country,count(),sum(F)groupbyBrowser,Country);altertablezmaterializeprojectionpp;---- 0 = don&amp;#39;t use proj, 1 = use projection setallow_experimental_projection_optimization=1;--Q1) selectsum(F),BrowserfromzgroupbyBrowserformatNull;Elapsed:0.003sec.Processed22.43thousandrows--Q2) selectsum(F),Browser,CountryfromzgroupbyBrowser,CountryformatNull;Elapsed:0.004sec.Processed22.43thousandrows--Q3) selectsum(F),count(),Browser,CountryfromzgroupbyBrowser,CountryformatNull;Elapsed:0.</description>
    </item>
    
    <item>
      <title>SAMPLE by</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-sample-by/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-sample-by/</guid>
      <description>The execution pipeline is embedded in the partition reading code.
So that works this way:
 ClickHouse does partition pruning based on WHERE conditions. For every partition, it picks a columns ranges (aka &amp;lsquo;marks&amp;rsquo; / &amp;lsquo;granulas&amp;rsquo;) based on primary key conditions. Here the sampling logic is applied: a) in case of SAMPLE k (k in 0..1 range) it adds conditions WHERE sample_key &amp;lt; k * max_int_of_sample_key_type b) in case of SAMPLE k OFFSET m it adds conditions WHERE sample_key BETWEEN m * max_int_of_sample_key_type AND (m + k) * max_int_of_sample_key_typec) in case of SAMPLE N (N&amp;gt;1) if first estimates how many rows are inside the range we need to read and based on that convert it to 3a case (calculate k based on number of rows in ranges and desired number of rows) on the data returned by those other conditions are applied (so here the number of rows can be decreased here)  Source Code</description>
    </item>
    
    <item>
      <title>Simple aggregate functions &amp; combinators</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/simplestateif-or-ifstate-for-simple-aggregate-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/simplestateif-or-ifstate-for-simple-aggregate-functions/</guid>
      <description>Q. What is SimpleAggregateFunction? Are there advantages to use it instead of AggregateFunction in AggregatingMergeTree? SimpleAggregateFunction can be used for those aggregations when the function state is exactly the same as the resulting function value. Typical example is max function: it only requires storing the single value which is already maximum, and no extra steps needed to get the final value. In contrast avg need to store two numbers - sum &amp;amp; count, which should be divided to get the final value of aggregation (done by the -Merge step at the very end).</description>
    </item>
    
    <item>
      <title>Time zones</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/time-zones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/time-zones/</guid>
      <description>Important things to know:
 DateTime inside clickhouse is actually UNIX timestamp always, i.e. number of seconds since 1970-01-01 00:00:00 GMT. Conversion from that UNIX timestamp to a human-readable form and reverse can happen on the client (for native clients) and on the server (for HTTP clients, and for some type of queries, like toString(ts)) Depending on the place where that conversion happened rules of different timezones may be applied. You can check server timezone using SELECT timezone() clickhouse-client also by default tries to use server timezone (see also --use_client_time_zone flag) If you want you can store the timezone name inside the data type, in that case, timestamp &amp;lt;-&amp;gt; human-readable time rules of that timezone will be applied.</description>
    </item>
    
    <item>
      <title>Top N &amp; Remain</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/top-n-and-remain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/top-n-and-remain/</guid>
      <description>CREATETABLEtop_with_rest(`k`String,`number`UInt64)ENGINE=Memory;INSERTINTOtop_with_restSELECTtoString(intDiv(number,10)),numberFROMnumbers_mt(10000);Using UNION ALL SELECT*FROM(SELECTk,sum(number)ASresFROMtop_with_restGROUPBYkORDERBYresDESCLIMIT10UNIONALLSELECTNULL,sum(number)ASresFROMtop_with_restWHEREkNOTIN(SELECTkFROMtop_with_restGROUPBYkORDERBYsum(number)DESCLIMIT10))ORDERBYresASC┌─k───┬───res─┐│990│99045││991│99145││992│99245││993│99345││994│99445││995│99545││996│99645││997│99745││998│99845││999│99945│└─────┴───────┘┌─k────┬──────res─┐│ᴺᵁᴸᴸ│49000050│└──────┴──────────┘Using arrays WITHtoUInt64(sumIf(sum,isNull(k))-sumIf(sum,isNotNull(k)))AStotalSELECT(arrayJoin(arrayPushBack(groupArrayIf(10)((k,sum),isNotNull(k)),(NULL,total)))AStpl).1ASkey,tpl.2ASresFROM(SELECTtoNullable(k)ASk,sum(number)ASsumFROMtop_with_restGROUPBYkWITHCUBEORDERBYsumDESCLIMIT11)ORDERBYresASC┌─key──┬──────res─┐│990│99045││991│99145││992│99245││993│99345││994│99445││995│99545││996│99645││997│99745││998│99845││999│99945││ᴺᵁᴸᴸ│49000050│└──────┴──────────┘Using window functions (starting from 21.1) SETallow_experimental_window_functions=1;SELECTkASkey,If(isNotNull(key),sum,toUInt64(sum-wind))ASresFROM(SELECT*,sumIf(sum,isNotNull(k))OVER()ASwindFROM(SELECTtoNullable(k)ASk,sum(number)ASsumFROMtop_with_restGROUPBYkWITHCUBEORDERBYsumDESCLIMIT11))ORDERBYresASC┌─key──┬──────res─┐│990│99045││991│99145││992│99245││993│99345││994│99445││995│99545││996│99645││997│99745││998│99845││999│99945││ᴺᵁᴸᴸ│49000050│└──────┴──────────┘</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/troubleshooting/</guid>
      <description>Log of query execution Controlled by session level setting send_logs_level
Possible values: &#39;trace&#39;, &#39;debug&#39;, &#39;information&#39;, &#39;warning&#39;, &#39;error&#39;, &#39;fatal&#39;, &#39;none&#39;
Can be used with clickhouse-client in both interactive and non-interactive mode.
$ clickhouse-client -mn --send_logs_level=&amp;#39;trace&amp;#39; --query &amp;#34;SELECT sum(number) FROM numbers(1000)&amp;#34; [LAPTOP] 2021.04.29 00:05:31.425842 [ 25316 ] {14b0646d-8a6e-4b2f-9b13-52a218cf43ba} &amp;lt;Debug&amp;gt; executeQuery: (from 127.0.0.1:42590, using production parser) SELECT sum(number) FROM numbers(1000) [LAPTOP] 2021.04.29 00:05:31.426281 [ 25316 ] {14b0646d-8a6e-4b2f-9b13-52a218cf43ba} &amp;lt;Trace&amp;gt; ContextAccess (default): Access granted: CREATE TEMPORARY TABLE ON *.</description>
    </item>
    
    <item>
      <title>UPDATE via Dictionary</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/update-via-dictionary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/update-via-dictionary/</guid>
      <description>CREATETABLEtest_update(`key`UInt32,`value`String)ENGINE=MergeTreeORDERBYkey;INSERTINTOtest_updateSELECTnumber,concat(&amp;#39;value &amp;#39;,toString(number))FROMnumbers(20);SELECT*FROMtest_update;┌─key─┬─value────┐│0│value0││1│value1││2│value2││3│value3││4│value4││5│value5││6│value6││7│value7││8│value8││9│value9││10│value10││11│value11││12│value12││13│value13││14│value14││15│value15││16│value16││17│value17││18│value18││19│value19│└─────┴──────────┘CREATETABLEtest_update_source(`key`UInt32,`value`String)ENGINE=MergeTreeORDERBYkey;INSERTINTOtest_update_sourceVALUES(1,&amp;#39;other value&amp;#39;),(10,&amp;#39;new value&amp;#39;);CREATEDICTIONARYupdate_dict(`key`UInt32,`value`String)PRIMARYKEYkeySOURCE(CLICKHOUSE(TABLE&amp;#39;test_update_source&amp;#39;))LIFETIME(MIN0MAX10)LAYOUT(FLAT);SELECTdictGet(&amp;#39;default.update_dict&amp;#39;,&amp;#39;value&amp;#39;,toUInt64(1));┌─dictGet(&amp;#39;default.update_dict&amp;#39;,&amp;#39;value&amp;#39;,toUInt64(1))─┐│othervalue│└──────────────────────────────────────────────────────┘ALTERTABLEtest_updateUPDATEvalue=dictGet(&amp;#39;default.update_dict&amp;#39;,&amp;#39;value&amp;#39;,toUInt64(key))WHEREdictHas(&amp;#39;default.update_dict&amp;#39;,toUInt64(key));SELECT*FROMtest_update┌─key─┬─value───────┐│0│value0││1│othervalue││2│value2││3│value3││4│value4││5│value5││6│value6││7│value7││8│value8││9│value9││10│newvalue││11│value11││12│value12││13│value13││14│value14││15│value15││16│value16││17│value17││18│value18││19│value19│└─────┴─────────────┘{% hint style=&amp;ldquo;info&amp;rdquo; %} In case of Replicated installation, Dictionary should be created on all nodes and source tables should have ReplicatedMergeTree engine and be replicated across all nodes. {% endhint %}</description>
    </item>
    
    <item>
      <title>Values mapping</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/values-mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/values-mapping/</guid>
      <description>SELECTcount()FROMnumbers_mt(1000000000)WHERENOTignore(transform(number%3,[0,1,2,3],[&amp;#39;aa&amp;#39;,&amp;#39;ab&amp;#39;,&amp;#39;ad&amp;#39;,&amp;#39;af&amp;#39;],&amp;#39;a0&amp;#39;))1rowsinset.Elapsed:4.668sec.Processed1.00billionrows,8.00GB(214.21millionrows/s.,1.71GB/s.)SELECTcount()FROMnumbers_mt(1000000000)WHERENOTignore(multiIf((number%3)=0,&amp;#39;aa&amp;#39;,(number%3)=1,&amp;#39;ab&amp;#39;,(number%3)=2,&amp;#39;ad&amp;#39;,(number%3)=3,&amp;#39;af&amp;#39;,&amp;#39;a0&amp;#39;))1rowsinset.Elapsed:7.333sec.Processed1.00billionrows,8.00GB(136.37millionrows/s.,1.09GB/s.)SELECTcount()FROMnumbers_mt(1000000000)WHERENOTignore(CAST(number%3ASEnum(&amp;#39;aa&amp;#39;=0,&amp;#39;ab&amp;#39;=1,&amp;#39;ad&amp;#39;=2,&amp;#39;af&amp;#39;=3)&amp;#39;)) 1 rows in set. Elapsed: 1.152 sec. Processed 1.00 billion rows, 8.00 GB (867.79 million rows/s., 6.94 GB/s.) </description>
    </item>
    
    <item>
      <title>Window functions</title>
      <link>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/window-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://beta.kb.altinity.com/altinity-kb-queries-and-syntax/window-functions/</guid>
      <description>Link blog.tinybird.co/2021/03/16/c…     Date Mar 26, 2021    blog.tinybird.co/2021/03/16/c…
 An exploration on what&amp;rsquo;s possible to do with the most recent experimental feature on ClickHouse - window functions, and an overview of other interesting feat&amp;hellip;
 &amp;lt;strong&amp;gt;Open link&amp;lt;/strong&amp;gt;
How Do I Simulate Window Functions Using Arrays on older versions of clickhouse?  Group with groupArray. Calculate the needed metrics. Ungroup back using arrayJoin.</description>
    </item>
    
  </channel>
</rss>
